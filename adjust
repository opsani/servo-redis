#!/usr/bin/env python3
import os

import yaml
from redis import Redis as RedisClient
from adjust import Adjust

DESC = "Redis adjust driver for Opsani Optune"
VERSION = "0.0.1"
HAS_CANCEL = False

config_path = os.environ.get('OPTUNE_CONFIG_PATH', './config.yaml')
secret_path = os.environ.get('OPTUNE_SECRET_CONFIG', './secret.yaml')


class RedisDriver(Adjust):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.config = c = yaml.load(open(config_path))
        self.config.update(yaml.load(open(secret_path)) if os.path.isfile(secret_path) else {})
        assert c and c.get('redis', None), 'No configuration was provided in "{}". Please refer to README.md'.format(config_path)
        c = c.get('redis')
        assert c.get('settings', None), 'Section "settings" was not provided in "{}". Please refer to README.md.'.format(config_path)
        assert c['settings'].get('maxmemory', None), 'Section "settings.maxmemory" was not provided in "{}". Please refer to README.md.'.format(config_path)
        assert c['settings']['maxmemory'].get('min', None), 'Setting "settings.maxmemory.min" was not provided in "{}". Please refer to README.md.'.format(config_path)
        assert c['settings']['maxmemory'].get('max', None), 'Setting "settings.maxmemory.max" was not provided in "{}". Please refer to README.md.'.format(config_path)
        assert c['settings']['maxmemory'].get('step', None), 'Setting "settings.maxmemory.step" was not provided in "{}". Please refer to README.md.'.format(config_path)
        assert c['settings'].get('maxmemory-policy', None), 'Section "settings.maxmemory-policy" was not provided in "{}". Please refer to README.md.'.format(config_path)
        assert c['settings']['maxmemory-policy'].get('values', []), 'Setting "settings.maxmemory.values" was not provided in "{}". Please refer to README.md.'.format(config_path)
        self.client = RedisClient(
            host=self.config.get('host', '127.0.0.1'),
            port=self.config.get('port', 6379),
            db=self.config.get('db', 0),
            password=self.config.get('password', ''),
        )

    def adjust(self, data=None):
        assert data, 'Received no settings to adjust. Panic.'
        settings = data['application']['components']['redis']['settings']
        size = len(settings)

        self.progress = 0
        self.progress_message = "adjusting {} settings".format(size)
        self.print_progress()

        for name, setting in settings.items():
            value = setting['value']

            if name == 'maxmemory':
                value = '{}mb'.format(int(value))

            self.client.config_set(name, value)

        self.progress = 100
        self.progress_message = "adjusted {} settings".format(size)
        self.print_progress()

    def query(self):
        return {
            'components': {
                'redis': {
                    'settings': {
                        'maxmemory': {
                            'type': 'range',
                            'value': int(self.client.config_get('maxmemory')['maxmemory']) // 2**20,
                            'min': self.config.get('settings').get('maxmemory').get('min'),
                            'max': self.config.get('settings').get('maxmemory').get('max'),
                            'step': self.config.get('settings').get('maxmemory').get('step'),
                            'unit': 'megabytes',
                        },
                        'maxmemory-policy': {
                            'type': 'enum',
                            'values': self.config.get('settings').get('maxmemory-policy').get('values'),
                            'value': self.client.config_get('maxmemory-policy')['maxmemory-policy'],
                        },
                    },
                },
            },
        }


if __name__ == '__main__':
    driver = RedisDriver(cli_desc=DESC, supports_cancel=HAS_CANCEL, version=VERSION)
    driver.run()
