#!/usr/bin/env python3
import os

import yaml
from redis import Redis as RedisClient
from adjust import Adjust

DESC = "Redis adjust driver for Opsani Optune"
VERSION = "0.0.1"
HAS_CANCEL = False

config_path = os.environ.get('OPTUNE_CONFIG_PATH', './config.yaml')
assert config_path, 'Please, provide `config.yaml` file path using environment variable OPTUNE_CONFIG_PATH.\n' \
                    'Its current value is "{}". You can refer to an example file config.yaml.example. ' \
                    'It can be found in the repo of this driver.'.format(config_path)

with open(config_path, 'r') as c:
    try:
        config = yaml.load(c)
    except FileNotFoundError as e:
        print('Could not find config.yaml at "{}"'.format(config_path))
        exit(1)
    except yaml.YAMLError as e:
        print('Could not parse config.yaml file located at "{}"'.format(config_path))
        raise

    assert config, 'No configuration was provided in the `config.yaml` file. ' \
                   'Please, make sure "{}" has all the required keys ' \
                   'as per specification; you can find in `README.md`.'.format(config_path)

try:
    redis_config = config.get('redis')
    redis_config_settings = redis_config.get('settings')
    redis_config_connection = redis_config.setdefault('connection', {})
except KeyError as e:
    raise Exception('Please, refer to config.yaml.example to define all the required configuration.\n'
                    'Original error: {}'.format(str(e)))


class RedisDriver(Adjust):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        rkwargs = {}
        if redis_config_connection:
            # Get connection settings from config.yaml
            rkwargs.update({
                'host': redis_config_connection.get('host', 'localhost'),
                'port': redis_config_connection.get('port', 6379),
                'db': redis_config_connection.get('db', 0),
                'password': redis_config_connection.get('password', ''),
            })
        # Get connection settings from prefixed environment variables
        rkwargs.update({
            'host': os.environ.get('OPTUNE_REDIS_HOST', 'localhost'),
            'port': os.environ.get('OPTUNE_REDIS_PORT', 6379),
            'db': os.environ.get('OPTUNE_REDIS_DB', 0),
            'password': os.environ.get('OPTUNE_REDIS_PASSWORD', ''),
        })
        self.client = RedisClient(**rkwargs)

    def adjust(self, data=None):
        settings = data['application']['components']['redis']['settings']

        self.progress = 0
        self.progress_message = "adjusting {} setting/s".format(len(settings))
        self.print_progress()

        for name, setting in settings.items():
            value = setting['value']

            if name == 'maxmemory':
                value = '{}mb'.format(int(value))

            # If setting is not supported, `redis.exceptions.ResponseError: Unsupported CONFIG parameter:`
            # will be raised.
            self.client.config_set(name, str(value))

        self.progress = 100
        self.progress_message = "adjusted {} setting/s".format(len(settings))
        self.print_progress()

    def query(self):
        return {
            'components': {
                'redis': {
                    'settings': {
                        'maxmemory': {
                            'type': 'range',
                            'value': int(int(self.client.config_get('maxmemory')['maxmemory']) / 1024 / 1024),
                            'min': redis_config_settings.get('maxmemory').get('min'),
                            'max': redis_config_settings.get('maxmemory').get('max'),
                            'step': redis_config_settings.get('maxmemory').get('step'),
                            'unit': 'megabytes',
                        },
                        'maxmemory-policy': {
                            'type': 'enum',
                            'values': redis_config_settings.get('maxmemory-policy').get('values'),
                            'value': self.client.config_get('maxmemory-policy')['maxmemory-policy'],
                        },
                    },
                },
            },
        }


if __name__ == '__main__':
    driver = RedisDriver(cli_desc=DESC, supports_cancel=HAS_CANCEL, version=VERSION)
    driver.run()
